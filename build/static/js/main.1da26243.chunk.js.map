{"version":3,"sources":["events.js","factories.js","components/LoginForm.js","components/chats/SideBarOption.js","components/chats/Sidebar.js","components/Messages/Messages.js","components/Messages/MessageInput.js","components/chats/ChatContainer.js","components/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GLOBAL_CHAT","USER_CONNECTED","MESSAGE_RECIEVED","MESSAGE_SENT","USER_DISCONNECTED","TYPING","VERIFY_USER","LOGOUT","PRIVATE_MESSAGE","NEW_CHAT_USER","uuidv4","require","createChatNameFromUsers","users","excludeUser","arguments","length","undefined","filter","u","el","i","ar","indexOf","join","getTime","date","concat","getHours","getMinutes","slice","createMessage","_ref2","_ref2$message","message","_ref2$sender","sender","id","time","Date","now","createChat","_ref3","_ref3$messages","messages","_ref3$users","name","_ref3$isGlobal","isGlobal","typingUsers","createUser","_ref","_ref$name","_ref$socketId","socketId","LoginForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setUser","isUser","user","setError","handleSubmit","e","preventDefault","socket","emit","state","handle","handleChange","setState","target","value","error","_this2","_this$state","react_default","a","createElement","className","onSubmit","placeholder","autoFocus","ref","input","textInput","type","onChange","fa","Component","SideBarOption","_this$props","lastMessage","active","onClick","toUpperCase","SideBar","onSendPrivateMessage","reciever","addChatForUser","username","setActiveSidebar","CHATS","newSideBar","activeSidebar","toggleNavbar","bind","assertThisInitialized","collapsed","width","setActiveChat","logout","chats","activeChat","filteredChats","uniqBy","reactstrap_es","color","light","isOpen","navbar","vertical","USERS","refs","map","chat","arr","chats_SideBarOption","key","get","last","differenceBy","title","md","Messages","scrollDown","prevProps","prevState","container","scrollTop","scrollHeight","newMessages","mes","MessageInput","sendMessage","sendTyping","lastUpdateTime","isTyping","startCheckingTyping","typingInterval","setInterval","stopCheckingTyping","clearInterval","onKeyUp","keyCode","v","disabled","ChatContainer","sendOpenPrivateMessage","addUserToChat","chatId","newUser","newChats","assign","toConsumableArray","removeUsersFromChat","removedUsers","newUsers","difference","objectSpread","resetChat","addChat","messageEvent","typingEvent","on","updateTypingInChat","addMessageToChat","includes","push","Math","max","document","documentElement","clientWidth","window","innerWidth","self","addEventListener","event","initSocket","off","values","_this3","msg","_this4","Sidebar_SideBar","components_Messages_Messages","Messages_MessageInput","socketUrl","Layout","reconnect","io","chats_ChatContainer","components_LoginForm","App","components_Layout","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1da26243.chunk.js","sourcesContent":["module.exports = {\n  GLOBAL_CHAT: \"GLOBAL_CHAT\",\n  USER_CONNECTED: \"USER_CONNECTED\",\n  MESSAGE_RECIEVED: \"MESSAGE_RECIEVED\",\n  MESSAGE_SENT: \"MESSAGE_SENT\",\n  USER_DISCONNECTED: \"USER_DISCONNECTED\",\n  TYPING: \"TYPING\",\n  VERIFY_USER: \"VERIFY_USER\",\n  LOGOUT: \"LOGOUT\",\n  PRIVATE_MESSAGE: \"PRIVATE_MESSAGE\",\n  NEW_CHAT_USER: \"NEW_CHAT_USER\"\n}\n","const uuidv4 = require('uuid/v4');\n\n/**\n * ? d\n * ! d\n * // f\n * todo a\n * * f\n */\n\n/**\n *  create a user\n */\n\nconst createUser = ({name = '', socketId = null} = {}) => (\n  {\n    id: uuidv4(),\n    name,\n    socketId\n  }\n)\n\n/**\n *  create a messages object\n */\n\n const createMessage = ({message = '', sender = ''} = {}) => {\n   return {\n     id: uuidv4(),\n     time: getTime(new Date(Date.now())),\n     message,\n     sender\n   }\n  }\n\n/**\n* create a Chat object\n*/\n\n const createChat = ({messages = [], name = \"hui1\", users = [], isGlobal = false} = {}) => {\n   return {\n     id: uuidv4(),\n     name: isGlobal ? 'Home' : createChatNameFromUsers(users),\n     messages,\n     users,\n     typingUsers: [],\n     isGlobal\n   }\n  }\n\n\n function createChatNameFromUsers(users, excludeUser = '') {\n   return users.filter(u => u !== excludeUser).filter((el, i, ar) =>{\n    return ar.indexOf(el) === i}).join(', ')\n }\n\n const getTime = (date) => {\n   return `${date.getHours()}:${(\"0\"+date.getMinutes()).slice(-2)}`\n }\n\n module.exports = {\n   createMessage,\n   createChat,\n   createUser,\n   createChatNameFromUsers\n }\n","import React, { Component } from 'react';\nimport { FaArrowCircleUp } from 'react-icons/fa';\nimport {VERIFY_USER} from '../events';\n\nclass LoginForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      handle: '',\n      error: ''\n    }\n  }\n\n  setUser = ({isUser, user}) => {\n    if(isUser) {\n      this.setError(\"Username taken\")\n    } else {\n      this.setError(null)\n      this.props.setUser(user)\n    }\n  }\n\n  /**\n   * Emit to the server and send the input handle so we\n   * can verify the user. The setUser cb will be called\n   * by the server with the response -> if a user already exists -\n   * an error is thrown, else - call local setUser that subsequently\n   * calls the setUser fn in the ChatContainer comp via props\n   */\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.socket.emit(VERIFY_USER, this.state.handle, this.setUser)\n  }\n\n  handleChange = (e) => {\n    this.setState({handle: e.target.value})\n  }\n\n  setError = (error) => {\n    this.setState({error})\n  }\n\n  render() {\n    const {handle, error} = this.state;\n    return (\n      <div className=\"login\">\n        <form onSubmit={this.handleSubmit} className=\"login-form\">\n        <div className=\"logo\">iChaty</div>\n          <input\n            placeholder=\"Your handle...\"\n            autoFocus\n            ref={(input) => { this.textInput = input}}\n            type=\"text\"\n            id=\"nickname\"\n            value={handle}\n            onChange={this.handleChange}\n          />\n          <button type=\"submit\" className=\"enter-btn\">\n            <FaArrowCircleUp/>\n          </button>\n          <div className=\"error\">\n            {error ? error : null}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default LoginForm;\n","import React, { Component } from 'react';\n\nclass SideBarOption extends Component {\n  render() {\n    const { name, lastMessage, active, onClick } = this.props;\n    if (name) {\n      return (\n        <div className={`user ${active ? 'active' : ''}`} onClick={onClick}>\n          <div className=\"user-photo\">{name[0].toUpperCase()}</div>\n          <div className=\"user-info\">\n            <div className=\"name\">{name}</div>\n            {lastMessage && <div className=\"last-message\">{lastMessage}</div>}\n          </div>\n        </div>\n      );\n    }\n    return null;\n  }\n}\n\nexport default SideBarOption;\n","import React, { Component } from 'react';\nimport { get, last, differenceBy, uniqBy } from 'lodash';\nimport { Nav, NavItem, Navbar, NavbarToggler, NavbarBrand, Collapse } from 'reactstrap';\nimport { FaSearch as FASearch } from 'react-icons/fa';\nimport { MdEject } from 'react-icons/md';\nimport SideBarOption from './SideBarOption';\nimport { createChatNameFromUsers } from '../../factories';\n\nexport default class SideBar extends Component {\n  static type = {\n    CHATS: 'chats',\n    USERS: 'users'\n  };\n  constructor(props) {\n    super(props);\n    this.toggleNavbar = this.toggleNavbar.bind(this);\n\n    this.state = {\n      collapsed: this.props.width < 767 ? true : false,\n      reciever: '',\n      activeSidebar: SideBar.type.CHATS\n    };\n  }\n\n  toggleNavbar() {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSendPrivateMessage(this.state.reciever);\n    this.setState({ reciever: '' });\n  };\n\n  addChatForUser = username => {\n    this.props.onSendPrivateMessage(username);\n    this.setActiveSidebar(SideBar.type.CHATS);\n  };\n\n  setActiveSidebar = newSideBar => {\n    this.setState({ activeSidebar: newSideBar });\n  };\n\n  render() {\n    const {\n      user,\n      users,\n      setActiveChat,\n      logout,\n      chats,\n      activeChat,\n      width\n    } = this.props;\n    const { reciever, activeSidebar } = this.state;\n    const filteredChats = uniqBy(chats, 'id')\n    return (\n      <div id=\"side-bar\">\n        <Navbar color=\"faded\" light>\n          <NavbarBrand className=\"mr-auto\">iChaty</NavbarBrand>\n          <div className=\"current-chat-nav\">{this.props.activeChat ? this.props.activeChat.name : null}</div>\n          <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n          {/* <h4>{this.props.name}</h4> */}\n          <Collapse isOpen={!this.state.collapsed} navbar>\n          <Nav navbar vertical>\n            {/* <div className=\"heading\">\n          <div className=\"app-name\">\n            <h1>iChat</h1>\n          </div>\n          <div className=\"menu\">\n            <FAMenu />\n          </div>\n        </div>*/}\n            <NavItem>\n              <form onSubmit={this.handleSubmit} className=\"search\">\n                <i className=\"search-icon\">\n                  <FASearch />\n                </i>\n                <input\n                  onChange={e => this.setState({ reciever: e.target.value })}\n                  value={reciever}\n                  placeholder=\"Search\"\n                  type=\"text\"\n                />\n              </form>\n            </NavItem>\n            <NavItem>\n              <div className=\"side-bar-select\">\n                <div\n                  onClick={() => this.setActiveSidebar(SideBar.type.CHATS)}\n                  className={`side-bar-select__option ${\n                    activeSidebar === SideBar.type.CHATS ? 'active' : ''\n                  }`}\n                >\n                  <span>Chats</span>\n                </div>\n                <div\n                  onClick={() => this.setActiveSidebar(SideBar.type.USERS)}\n                  className={`side-bar-select__option ${\n                    activeSidebar === SideBar.type.USERS ? 'active' : ''\n                  }`}\n                >\n                  <span>Users</span>\n                </div>\n              </div>\n            </NavItem>\n            <NavItem className=\"userList\">\n              <div\n                className=\"users\"\n                ref=\"users\"\n                onClick={e => {\n                  e.target === this.refs.user && setActiveChat(null);\n                }}\n              >\n                {activeSidebar === SideBar.type.CHATS\n                  ? filteredChats.map((chat,i,arr) => {\n                      return (\n                        <SideBarOption\n                          key={chat.id}\n                          lastMessage={get(last(chat.messages), 'message', '')}\n                          name={\n                            chat.isGlobal\n                              ? chat.name\n                              : createChatNameFromUsers(chat.users, user.name)\n                          }\n                          active={activeChat.id === chat.id}\n                          onClick={() => {\n                            this.props.setActiveChat(chat);\n                            return width < 767 ? this.setState({\n                              collapsed: !this.state.collapsed\n                            }) : null;\n                          }}\n                        />\n                      );\n                    })\n                  : differenceBy(users, [user], 'name').map(user => {\n                      return (\n                        <SideBarOption\n                          key={user.id}\n                          name={user.name}\n                          onClick={() => {\n                            this.addChatForUser(user.name);\n                            return width < 767 ? this.setState({\n                              collapsed: !this.state.collapsed\n                            }) : null;\n                          }}\n                        />\n                      );\n                    })}\n              </div>\n            </NavItem>\n            <NavItem className=\"small\">\n              <div className=\"current-user\">\n                <span>{user.name}</span>\n                <div\n                  onClick={() => {\n                    logout();\n                  }}\n                  title=\"Logout\"\n                  className=\"logout\"\n                >\n                  <MdEject />\n                </div>\n              </div>\n            </NavItem>\n          </Nav>\n          </Collapse>\n        </Navbar>\n        <div className=\"current-user big\">\n          <span>{user.name}</span>\n          <div\n            onClick={() => {\n              logout();\n            }}\n            title=\"Logout\"\n            className=\"logout\"\n          >\n            <MdEject />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { uniqBy } from 'lodash';\n\nclass Messages extends Component {\n  constructor(props) {\n    super(props);\n    this.scrollDown = this.scrollDown.bind(this);\n  }\n  componentDidMount() {\n    this.scrollDown();\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.scrollDown();\n  }\n\n  scrollDown() {\n    const { container } = this.refs;\n    container.scrollTop = container.scrollHeight;\n  }\n\n  render() {\n    const { messages, user, typingUsers } = this.props;\n    const newMessages = uniqBy(messages, 'id')\n    return (\n      <div ref=\"container\" className=\"thread-container\">\n        <div className=\"thread\">\n          {/* <div>{JSON.stringify(messages, null, 2)}</div> */}\n          {newMessages.map(mes => {\n            return (\n              <div\n                key={mes.id}\n                className={`message-container ${mes.sender === user.name &&\n                  'right'}`}\n              >\n                <div className=\"time\"><span>{mes.sender.slice(0,1).toUpperCase()}</span></div>\n                <div className=\"data\">\n                  {/* <div>{mes.id}</div> */}\n                  <div className=\"message\">{mes.message}</div>\n                  <div className=\"name\">{mes.time}</div>\n                </div>\n              </div>\n            );\n          })}\n          <div className=\"typing-user\">\n            {typingUsers.map(name => {\n              return (\n                  <span key={'typing_user' + Date.now()}>{`${name} is typing...`}</span>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Messages;\n","import React, { Component } from 'react';\n\nclass MessageInput extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: '',\n      isTyping: false\n    };\n  }\n  componentWillUnmount() {\n    this.stopCheckingTyping();\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.sendMessage();\n    this.setState({ message: '' });\n  };\n\n  sendMessage = () => {\n    this.props.sendMessage(this.state.message);\n  };\n\n  sendTyping = () => {\n    this.lastUpdateTime = Date.now();\n    if (!this.state.isTyping) {\n      this.setState({ isTyping: true });\n      this.props.sendTyping(true);\n      this.startCheckingTyping();\n    }\n  };\n\n  startCheckingTyping = () => {\n    this.typingInterval = setInterval(() => {\n      if (Date.now() - this.lastUpdateTime > 300) {\n        this.setState({ isTyping: false });\n        this.stopCheckingTyping();\n      }\n    }, 300);\n  };\n\n  stopCheckingTyping = () => {\n    if (this.typingInterval) {\n      clearInterval(this.typingInterval);\n      this.props.sendTyping(false);\n    }\n  };\n\n  render() {\n    const { message } = this.state;\n    return (\n      <div className=\"message-input\">\n        <form onSubmit={this.handleSubmit} className=\"message-form\">\n          <input\n            type=\"text\"\n            id=\"message\"\n            ref=\"messageInput\"\n            className=\"form-control\"\n            value={message}\n            placeholder=\"Message\"\n            onKeyUp={e => e.keyCode !== 13 && this.sendTyping()}\n            onChange={({ target: { value: v } }) => {\n              this.setState({ message: v });\n            }}\n          />\n          <button disabled={message.length < 1} type=\"submit\" className=\"send\">\n            Send\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default MessageInput;\n","import React, { Component } from 'react';\nimport { Container, Row, Col } from 'reactstrap';\nimport { values, difference, differenceBy } from 'lodash';\nimport SideBar from './Sidebar';\nimport {\n  GLOBAL_CHAT,\n  MESSAGE_RECIEVED,\n  MESSAGE_SENT,\n  TYPING,\n  PRIVATE_MESSAGE,\n  USER_CONNECTED,\n  USER_DISCONNECTED,\n  NEW_CHAT_USER\n} from '../../events';\nimport Messages from '../Messages/Messages';\nimport MessageInput from '../Messages/MessageInput';\n\nclass ChatContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chats: [],\n      users: [],\n      activeChat: null,\n      width: Math.max(\n        document.documentElement.clientWidth,\n        window.innerWidth || 0\n      )\n    };\n  }\n  componentDidMount() {\n    // this.setActiveChat(this.state.chats[0])\n    var self = this;\n    window.addEventListener('resize', function(event) {\n      self.setState({\n        width: Math.max(\n          document.documentElement.clientWidth,\n          window.innerWidth || 0\n        )\n      });\n    });\n    /**\n     * Initiates a new chat. The response from the server\n     * will be a chat object that will be passed to resetChat fn\n     * This way we can set the global chat as the activeChat autmatically\n     * without the need to select it manualy\n     */\n    this.props.socket.emit(GLOBAL_CHAT, this.resetChat);\n    this.initSocket(this.props.socket);\n  }\n\n\n  componentWillUnmount() {\n    this.props.socket.off(PRIVATE_MESSAGE);\n    this.props.socket.off(USER_CONNECTED);\n    this.props.socket.off(USER_DISCONNECTED);\n    this.props.socket.off(NEW_CHAT_USER);\n  }\n\n  initSocket(socket) {\n    socket.on(PRIVATE_MESSAGE, this.addChat);\n    socket.on('connect', () => {\n      socket.emit(GLOBAL_CHAT, this.resetChat);\n    });\n    socket.on(USER_CONNECTED, users => {\n      this.setState({ users: values(users) });\n    });\n    socket.on(USER_DISCONNECTED, users => {\n      const removedUsers = differenceBy(this.state.users, values(users));\n      this.removeUsersFromChat(removedUsers);\n      this.setState({ users: values(users) });\n    });\n    socket.on(NEW_CHAT_USER, this.addUserToChat);\n  }\n\n  sendOpenPrivateMessage = reciever => {\n    this.props.socket.emit(PRIVATE_MESSAGE, {\n      reciever,\n      sender: this.props.user.name,\n      activeChat: this.state.activeChat\n    });\n  };\n  // we will get chatid and newUser from the backend\n  addUserToChat = ({ chatId, newUser }) => {\n    const newChats = this.state.chats.map(chat => {\n      if (chat.id === chatId) {\n        return Object.assign({}, chat, { users: [...chat.users, newUser] });\n      }\n      return chat;\n    });\n    this.setState({ chats: newChats });\n  };\n\n  removeUsersFromChat = removedUsers => {\n    const newChats = this.state.chats.map(chat => {\n      let newUsers = difference(chat.users, removedUsers.map(u => u.name));\n      // spread operator works just like Object.assign in the prev method\n      return { ...chat, users: newUsers };\n    });\n    this.setState({ chats: newChats });\n  };\n\n  // reset the chat back to the one passed in\n  resetChat = chat => this.addChat(chat, true);\n\n  /**\n   * The logic for adding the chats to our state. When a `true`\n   * reset parameter is passed, it means we want to reset our chat just\n   * to the global one, otherwise push the passed-in chat to our chats array.\n   * Also, set the new chat to the activeChat state prop\n   */\n  addChat = (chat, reset = false) => {\n    /**\n     * if reset=true -> we emited the global_chat action and the state\n     *  will be reset to just the global chat\n     */\n    const newChats = reset ? [chat] : [...this.state.chats, chat];\n    /**\n     * activeChat will become whaterver chat wass passed in to the addChat fn,\n     * by default it will be the global chat\n     */\n    this.setState({ chats: newChats, activeChat: chat });\n    const messageEvent = `${MESSAGE_RECIEVED}-${chat.id}`;\n    const typingEvent = `${TYPING}-${chat.id}`;\n    this.props.socket.on(typingEvent, this.updateTypingInChat(chat.id));\n    this.props.socket.on(messageEvent, this.addMessageToChat(chat.id));\n  };\n\n  addMessageToChat(chatId) {\n    return msg => {\n      let newChats = this.state.chats.map(chat => {\n        if (chat.id === chatId) {\n          chat.messages.push(msg);\n        }\n        return chat;\n      });\n      this.setState({ chats: newChats });\n    };\n  }\n\n  updateTypingInChat = chatId => {\n    return ({ isTyping, user }) => {\n      if (user !== this.props.user.name) {\n        let newChats = this.state.chats.map(chat => {\n          if (chat.id === chatId) {\n            if (isTyping && !chat.typingUsers.includes(user)) {\n              chat.typingUsers.push(user);\n            } else if (!isTyping && chat.typingUsers.includes(user)) {\n              chat.typingUsers = chat.typingUsers.filter(u => u !== user);\n            }\n          }\n          return chat;\n        });\n        this.setState({ chats: newChats });\n      }\n    };\n  };\n\n  // Sends the message to the specified chat\n  sendMessage = (chatId, message) => {\n    this.props.socket.emit(MESSAGE_SENT, { chatId, message });\n  };\n\n  // Sends typing status to the server\n  sendTyping = (chatId, isTyping) => {\n    this.props.socket.emit(TYPING, { chatId, isTyping });\n  };\n\n  setActiveChat = activeChat => {\n    this.setState({ activeChat });\n  };\n  render() {\n    const { user, logout } = this.props;\n    const { chats, activeChat, users, width } = this.state;\n    return (\n      <Container>\n        <Row>\n            <Col md=\"3\">\n            <SideBar\n              name={activeChat ? activeChat.name : 'Hiu'}\n              logout={logout}\n              chats={chats}\n              user={user}\n              users={users}\n              activeChat={activeChat}\n              width={width}\n              setActiveChat={this.setActiveChat}\n              onSendPrivateMessage={this.sendOpenPrivateMessage}\n            />\n            </Col>\n          <Col md=\"9\">\n          <div className=\"chat-room-container\">\n            {activeChat !== null ? (\n              <div className=\"chat-room\">\n                {/* <ChatHeading name={activeChat.name} /> */}\n                <Messages\n                  messages={activeChat.messages}\n                  user={user}\n                  typingUsers={activeChat.typingUsers}\n                />\n                <MessageInput\n                  sendMessage={message =>\n                    this.sendMessage(activeChat.id, message)\n                  }\n                  sendTyping={isTyping =>\n                    this.sendTyping(activeChat.id, isTyping)\n                  }\n                />\n              </div>\n            ) : (\n              <div className=\"chat-room choose\">\n                <h3>Choose a chat!</h3>\n              </div>\n            )}\n          </div>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default ChatContainer;\n","import React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport LoginForm from './LoginForm';\nimport ChatContainer from './chats/ChatContainer';\nimport { USER_CONNECTED, LOGOUT, VERIFY_USER } from '../events';\n\nconst socketUrl = 'http://192.168.100.3:3231/';\n// const socketUrl = '/';\nclass Layout extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      socket: null,\n      user: null\n    };\n  }\n\n  componentWillMount() {\n    this.initSocket();\n  }\n\n  /**\n   * On phones, when swithing screens or locking them, the user\n   * disconnects from the server even though he is still\n   * logged in. We make use of reconnect fn to connect them back\n   */\n  reconnect = (socket) => {\n    //emit to the server so we can handle the req in socketmanager.js\n    socket.emit(VERIFY_USER, this.state.user.name, ({isUser, user}) => {\n      // fn called back by the server with the results\n      if(isUser) {\n        //checking for existing users\n        this.state({user: null})\n      } else {\n        this.setUser(user)\n      }\n    })\n  }\n\n  /**\n   * Initiate socket.io first and set it in the local state,\n   * so we can pass it around (eg as props to children components)\n   */\n  initSocket = () => {\n    const socket = io(socketUrl);\n    socket.on('connect', () => {\n      if(this.state.user) {\n        this.reconnect(socket)\n      }\n      return null\n    });\n    this.setState({\n      socket\n    });\n  };\n\n  /**\n   * setUser will be called from the LoginForm comp. if there is\n   * no user already logged in (user is null in our local state).\n   * But if we have a user we dont need to call this fn as we will\n   * render the ChatContainer instead(or after the user in the state is set)\n   */\n  setUser = user => {\n    this.state.socket.emit(USER_CONNECTED, user);\n    this.setState({ user });\n  };\n\n  /**\n   * Logout it the opposite of the setUser fn. We pass it to the\n   * chatContainer comp as prop because we already have a user\n   * connected/loggedIn if this comp is rendered\n   */\n  logout = () => {\n    //logout action emited so we can disconnect the user on the server\n    this.state.socket.emit(LOGOUT);\n    this.setState({ user: null });\n  };\n\n  render() {\n    const { socket, user } = this.state;\n    return (\n      <div className=\"layout\">\n        {!user ? (\n          <LoginForm socket={this.state.socket} setUser={this.setUser} />\n        ) : (\n          <ChatContainer socket={socket} user={user} logout={this.logout} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Layout;\n","import React, { Component } from 'react';\nimport Layout from './components/Layout';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nclass App extends Component {\n  render() {\n    return (\n        <Layout title=\"Chat App\" />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}